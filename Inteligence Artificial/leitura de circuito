def Xor(a,b):
     if a!=b:
        return 1
     elif a==b:
        return 0

def Nand(a,b):
    if a==1 and b==1:
        return 0
    else:
        return 1
    
def Nor(a,b):
    if a==0 and b==0:
        return 1
    else:
        return 0

def And(a,b):
    if a==1 and b==1:
        return 1
    else:
        return 0

def Or(a,b,*args):
    if a==1:
        return 1
    if b==1:
        return 1
    if args==1:
        return 1
    else:
        return 0

def Not(a):
    if a==0:
        return 1
    if a==1:
        return 0

def Nnot(a):
    
    return a

with open('/home/marcelo/Documents/circuito4.txt','r',errors='replace') as f:
     linhas=f.readlines()
n=len(linhas)
for i in range(n):
    if linhas[i].find('imputs')!=-1:
        n_entr=linhas[i][len('imputs, ')]
        for j in range(len(linhas[i])):
            if linhas[i][j].isdecimal()==True:
                #print(linhas[i][j])
                #print(j)
                imputs=(linhas[i][j+2:len(linhas[i])])
                #print(imputs)
                imputs=imputs.strip()
                imputs=imputs.replace(" ", "")
                imputs=imputs.rstrip('.')
                break
    elif linhas[i].find('outputs')!=-1:
        n_said=linhas[i][len('outputs, ')]
        for j in range(len(linhas[i])):
            if linhas[i][j].isdecimal()==True:
                #print(linhas[i][j])
                #print(j)
                outputs=(linhas[i][j+2:len(linhas[i])])
                outputs=outputs.strip()
                outputs=outputs.replace(" ", "")
                outputs=outputs.rstrip('.')
                break
    elif linhas[i].find('gates')!=-1 and linhas[i][0]!='%':
        n_gates=linhas[i][len('gates, ')]
        for j in range(len(linhas[i])):
            if linhas[i][j].isdecimal()==True:
                gates=(linhas[i][j+2:len(linhas[i])])
                break
        gates=gates.strip()
        gates=gates.replace(" ", "")
        gates=gates.rstrip('.')
n_entr=int(n_entr)
n_said=int(n_said)
n_gates=int(n_gates)
imputs=imputs.split(",")
outputs=outputs.split(",")
gates=gates.split(",")

tab=[]
ent=n_entr
contador=0
for i in range(2**ent//2):
    tab.append([0])
for i in range(2**ent//2):
    tab.append([1])
for i in range(2**ent):
    if (i+1)%2==0:
        tab[i].append(1)
    else:
        tab[i].append(0)
def completa(ent,contador):
     if ent-2!=0:
        i=0
        for j in range(2**(contador+1)):
            x=2**ent//2//2 #passo
            while x!=0:
                 tab[i].insert(contador+1,0)
                 x-=1
                 i+=1
            x=2**ent//2//2 #passo
            while x!=0:
                 tab[i].insert(contador+1,1)
                 x-=1
                 i+=1
        contador+=1 
        if contador==ent-1:
             return tab
        else:
             completa(ent-1,contador)
completa(ent,contador)

for x in range(len(gates)):
    locals()[gates[x]]=[]
for x in range(len(imputs)):
    locals()[imputs[x]]=[] 
for x in range(len(outputs)):
    locals()[outputs[x]]=[] 

for f in range(len(imputs)):
    for g in range(2**n_entr):
        locals()[imputs[f]].append(tab[g][f])
        
z=0
vetorg1=[[] for i in range(len(gates))]
for x in range(len(gates)):
    for i in range(len(linhas)):
        if linhas[i][0:4].find(gates[x])!=-1:
            if z==0:
                z=i
                #print(z)
            for j in range(len(linhas[i])):
                if linhas[i][j]=='%':
                    break
                if linhas[i][j]==' ':
                    vetorg1[x].append(j)    
                if linhas[i][j]=='.':
                    vetorg1[x].append(j+1)   

for x in range(len(gates)):
    if len(vetorg1[x])==3:
        for i in range(2**n_entr):
            locals()[gates[x]].append(eval(str.capitalize(linhas[x+z][vetorg1[x][0]+1:vetorg1[x][1]-1]))\
                                  (eval(linhas[x+z][vetorg1[x][1]+1:vetorg1[x][2]-1])[i]))
    if len(vetorg1[x])==4:
        for i in range(2**n_entr):
            locals()[gates[x]].append(eval(str.capitalize(linhas[x+z][vetorg1[x][0]+1:vetorg1[x][1]-1]))\
                                  (eval(linhas[x+z][vetorg1[x][1]+1:vetorg1[x][2]-1])[i],\
                                   eval(linhas[x+z][vetorg1[x][2]+1:vetorg1[x][3]-1])[i]))
    if len(vetorg1[x])==5:
        for i in range(2**n_entr):
            locals()[gates[x]].append(eval(str.capitalize(linhas[x+z][vetorg1[x][0]+1:vetorg1[x][1]-1]))\
                                  (eval(linhas[x+z][vetorg1[x][1]+1:vetorg1[x][2]-1])[i],\
                                   eval(linhas[x+z][vetorg1[x][2]+1:vetorg1[x][3]-1])[i],\
                                   eval(linhas[x+z][vetorg1[x][3]+1:vetorg1[x][4]-1])[i]))
w=0
vetorsaida=[[] for i in range(len(outputs))]
for x in range(len(outputs)):
    for i in range(len(linhas)):
        if linhas[i][0:4].find(outputs[x])!=-1:
            if w==0:
                w=i
            for j in range(len(linhas[i])):
                if linhas[i][j]=='%':
                    break
                if linhas[i][j]==' ':
                    vetorsaida[x].append(j)
                if linhas[i][j]=='.':
                    vetorsaida[x].append(j+1)
    
for x in range(len(outputs)):
    #print(z)
    locals()[outputs[x]].append(eval(str.capitalize(linhas[x+w][vetorsaida[x][0]+1:vetorsaida[x][1]-1]))\
                                  (eval(linhas[x+w][vetorsaida[x][1]+1:vetorsaida[x][2]-1])))

print (*imputs,*outputs,sep = "|")
print('———————————————')
for i in range(2**ent):
    if i!=0:
        print(sep="\n")
    for d in range(len(imputs)):
    #print(end="\n")
        print(eval(imputs[d])[i],end=" ")
        
    for f in range(len(outputs)):
        if f==0:
            print(end="|")
        print(eval(outputs[f])[0][i],end=" ")    
